name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  build_python_posix:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-20.04
          - ubuntu-22.04
          - macos-13
          - macos-14
        python-version:
          - 3.10.15
          - 3.12.6

    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      PYTHON_BUILD: ${{ github.workspace }}/build
      PYTHON_DIST: ${{ github.workspace }}/dist
      PYTHON_TARGET: ${{ github.workspace }}/output

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/checkout@v4
      - name: Cache Python dist files
        id: python-dist
        uses: actions/cache@v4
        with:
          path: ${{ env.PYTHON_DIST }}
          key: ${{ matrix.python-version }}
          enableCrossOsArchive: true
      - name: Install conan
        uses: turtlebrowser/get-conan@main
      - name: Get conan home
        id: conan_home
        shell: bash
        run: echo CONAN_HOME=`conan config home` >> "$GITHUB_OUTPUT"
      - name: Cache conan artifacts
        uses: actions/cache@v4
        with:
          path: ${{ steps.conan_home.outputs.CONAN_HOME }}
          key: ${{ runner.os }}-${{ runner.arch }}
      - name: Build Python
        run: bash build_python.sh ${{ env.PYTHON_TARGET }}
      - name: Test
        run: bash test/run_tests.sh
        env:
          PYTHON: ${{ env.PYTHON_TARGET }}/python
      - name: Get linked libraries tool
        id: ldd
        run: case `uname` in 'Linux') echo 'ldd=ldd' >> $GITHUB_OUTPUT;; 'Darwin') echo 'ldd=otool -L' >> $GITHUB_OUTPUT;; esac
      - name: Check linked libraries
        run: |
          echo 'Main executable'
          ${{ steps.ldd.outputs.ldd }} ${{ env.PYTHON_TARGET }}/python
          echo 'Modules'
          find ${{ env.PYTHON_TARGET }} -name '*.so' -exec ${{ steps.ldd.outputs.ldd }} {} \; | egrep -o '\s/[a-zA-Z/][-a-zA-Z0-9_\./]+' | sort | uniq

  build_python_windows:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - windows-2019
          - windows-2022
        python-version:
          - 3.10.16
          - 3.12.8

    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      PYTHON_BUILD: ${{ github.workspace }}\build
      PYTHON_DIST: ${{ github.workspace }}\dist
      PYTHON_TARGET: ${{ github.workspace }}\output

    steps:
      - uses: actions/checkout@v4
      - name: Cache Python dist files
        id: python-dist
        uses: actions/cache@v4
        with:
          path: ${{ env.PYTHON_DIST }}
          key: ${{ matrix.python-version }}
          enableCrossOsArchive: true
      - name: Build Python
        run: build_python.bat ${{ env.PYTHON_TARGET }}
        shell: cmd
      - name: Test
        run: bash test/run_tests.sh
        env:
          PYTHON: ${{ env.PYTHON_TARGET }}/python
